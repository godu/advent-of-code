module AdventOfCode.Year2020.Day20Spec
  ( spec,
  )
where

import AdventOfCode.Year2020.Day20
  ( Puzzle (Puzzle),
    Tile (Tile),
    combineTiles,
    edges,
    findPlace,
    hFlip,
    markMonster,
    process1,
    process2,
    puzzleToList,
    resolve,
    run1,
    run2,
    vFlip,
  )
import Data.Map as M (empty, fromList)
import Data.Set as S (fromList)
import Test.Hspec
  ( Spec,
    it,
    shouldBe,
  )

input =
  "Tile 2311:\n\
  \..##.#..#.\n\
  \##..#.....\n\
  \#...##..#.\n\
  \####.#...#\n\
  \##.##.###.\n\
  \##...#.###\n\
  \.#.#.#..##\n\
  \..#....#..\n\
  \###...#.#.\n\
  \..###..###\n\
  \\n\
  \Tile 1951:\n\
  \#.##...##.\n\
  \#.####...#\n\
  \.....#..##\n\
  \#...######\n\
  \.##.#....#\n\
  \.###.#####\n\
  \###.##.##.\n\
  \.###....#.\n\
  \..#.#..#.#\n\
  \#...##.#..\n\
  \\n\
  \Tile 1171:\n\
  \####...##.\n\
  \#..##.#..#\n\
  \##.#..#.#.\n\
  \.###.####.\n\
  \..###.####\n\
  \.##....##.\n\
  \.#...####.\n\
  \#.##.####.\n\
  \####..#...\n\
  \.....##...\n\
  \\n\
  \Tile 1427:\n\
  \###.##.#..\n\
  \.#..#.##..\n\
  \.#.##.#..#\n\
  \#.#.#.##.#\n\
  \....#...##\n\
  \...##..##.\n\
  \...#.#####\n\
  \.#.####.#.\n\
  \..#..###.#\n\
  \..##.#..#.\n\
  \\n\
  \Tile 1489:\n\
  \##.#.#....\n\
  \..##...#..\n\
  \.##..##...\n\
  \..#...#...\n\
  \#####...#.\n\
  \#..#.#.#.#\n\
  \...#.#.#..\n\
  \##.#...##.\n\
  \..##.##.##\n\
  \###.##.#..\n\
  \\n\
  \Tile 2473:\n\
  \#....####.\n\
  \#..#.##...\n\
  \#.##..#...\n\
  \######.#.#\n\
  \.#...#.#.#\n\
  \.#########\n\
  \.###.#..#.\n\
  \########.#\n\
  \##...##.#.\n\
  \..###.#.#.\n\
  \\n\
  \Tile 2971:\n\
  \..#.#....#\n\
  \#...###...\n\
  \#.#.###...\n\
  \##.##..#..\n\
  \.#####..##\n\
  \.#..####.#\n\
  \#..#.#..#.\n\
  \..####.###\n\
  \..#.#.###.\n\
  \...#.#.#.#\n\
  \\n\
  \Tile 2729:\n\
  \...#.#.#.#\n\
  \####.#....\n\
  \..#.#.....\n\
  \....#..#.#\n\
  \.##..##.#.\n\
  \.#.####...\n\
  \####.#.#..\n\
  \##.####...\n\
  \##..#.##..\n\
  \#.##...##.\n\
  \\n\
  \Tile 3079:\n\
  \#.#.#####.\n\
  \.#..######\n\
  \..#.......\n\
  \######....\n\
  \####.#..#.\n\
  \.#...#.##.\n\
  \#.#####.##\n\
  \..#.###...\n\
  \..#.......\n\
  \..#.###...\n"

spec :: Spec
spec = do
  it "edges" $
    do
      edges
        ( Puzzle $
            M.fromList
              [ ((0, 0), Tile 0 []),
                ((1, 0), Tile 0 [])
              ]
        )
        `shouldBe` S.fromList
          [ (-1, 0),
            (0, -1),
            (0, 1),
            (1, -1),
            (1, 1),
            (2, 0)
          ]

  it "findPlace" $ do
    let (x : y : xs) = read input
    findPlace
      (Puzzle $ M.fromList [((0, 0), vFlip x), ((-1, 0), vFlip y)])
      xs
      `shouldBe` return (-1, -1)

  it "run1" $ do
    run1 input
      `shouldBe` "20899048083289"
  it "markMonster" $ do
    markMonster
      [ "..................#.",
        "#....##....##....###",
        ".#..#..#..#..#..#..."
      ]
      `shouldBe` [ "..................O.",
                   "O....OO....OO....OOO",
                   ".O..O..O..O..O..O..."
                 ]
    markMonster
      [ ".####...#####..#...###..",
        "#####..#..#.#.####..#.#.",
        ".#.#...#.###...#.##.##..",
        "#.#.##.###.#.##.##.#####",
        "..##.###.####..#.####.##",
        "...#.#..##.##...#..#..##",
        "#.##.#..#.#..#..##.#.#..",
        ".###.##.....#...###.#...",
        "#.####.#.#....##.#..#.#.",
        "##...#..#....#..#...####",
        "..#.##...###..#.#####..#",
        "....#.##.#.#####....#...",
        "..##.##.###.....#.##..#.",
        "#...#...###..####....##.",
        ".#.##...#.##.#.#.###...#",
        "#.###.#..####...##..#...",
        "#.###...#.##...#.######.",
        ".###.###.#######..#####.",
        "..##.#..#..#.#######.###",
        "#.#..##.########..#..##.",
        "#.#####..#.#...##..#....",
        "#....##..#.#########..##",
        "#...#.....#..##...###.##",
        "#..###....##.#...##.##.#"
      ]
      `shouldBe` [ ".####...#####..#...###..",
                   "#####..#..#.#.####..#.#.",
                   ".#.#...#.###...#.##.O#..",
                   "#.O.##.OO#.#.OO.##.OOO##",
                   "..#O.#O#.O##O..O.#O##.##",
                   "...#.#..##.##...#..#..##",
                   "#.##.#..#.#..#..##.#.#..",
                   ".###.##.....#...###.#...",
                   "#.####.#.#....##.#..#.#.",
                   "##...#..#....#..#...####",
                   "..#.##...###..#.#####..#",
                   "....#.##.#.#####....#...",
                   "..##.##.###.....#.##..#.",
                   "#...#...###..####....##.",
                   ".#.##...#.##.#.#.###...#",
                   "#.###.#..####...##..#...",
                   "#.###...#.##...#.##O###.",
                   ".O##.#OO.###OO##..OOO##.",
                   "..O#.O..O..O.#O##O##.###",
                   "#.#..##.########..#..##.",
                   "#.#####..#.#...##..#....",
                   "#....##..#.#########..##",
                   "#...#.....#..##...###.##",
                   "#..###....##.#...##.##.#"
                 ]
  it "combineTiles" $ do
    (\(Tile _ pic) -> pic) . hFlip . combineTiles . puzzleToList <$> resolve (read input)
      `shouldBe` return
        [ ".#.#..#.##...#.##..#####",
          "###....#.#....#..#......",
          "##.##.###.#.#..######...",
          "###.#####...#.#####.#..#",
          "##.#....#.##.####...#.##",
          "...########.#....#####.#",
          "....#..#...##..#.#.###..",
          ".####...#..#.....#......",
          "#..#.##..#..###.#.##....",
          "#.####..#.####.#.#.###..",
          "###.#.#...#.######.#..##",
          "#.####....##..########.#",
          "##..##.#...#...#.#.#.#..",
          "...#..#..#.#.##..###.###",
          ".#.#....#.##.#...###.##.",
          "###.#...#..#.##.######..",
          ".#.#.###.##.##.#..#.##..",
          ".####.###.#...###.#..#.#",
          "..#.#..#..#.#.#.####.###",
          "#..####...#.#.#.###.###.",
          "#####..#####...###....##",
          "#.##..#..#...#..####...#",
          ".#.###..##..##..####.##.",
          "...###...##...#...#..###"
        ]
  it "run2" $ do
    run2 input `shouldBe` "273"
